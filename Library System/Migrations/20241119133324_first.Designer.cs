// <auto-generated />
using System;
using Library_System.AppContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library_System.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241119133324_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorModelBookModel", b =>
                {
                    b.Property<int>("BooksBookModelId")
                        .HasColumnType("int");

                    b.Property<int>("authorsAuthorModelId")
                        .HasColumnType("int");

                    b.HasKey("BooksBookModelId", "authorsAuthorModelId");

                    b.HasIndex("authorsAuthorModelId");

                    b.ToTable("AuthorModelBookModel");
                });

            modelBuilder.Entity("BookModelGenreModel", b =>
                {
                    b.Property<int>("booksBookModelId")
                        .HasColumnType("int");

                    b.Property<int>("genresGenreModelId")
                        .HasColumnType("int");

                    b.HasKey("booksBookModelId", "genresGenreModelId");

                    b.HasIndex("genresGenreModelId");

                    b.ToTable("BookModelGenreModel");
                });

            modelBuilder.Entity("Library_System.Models.AuthorModel", b =>
                {
                    b.Property<int>("AuthorModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorModelId"));

                    b.Property<string>("AuthorModelEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorModelPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdentityCardId")
                        .HasColumnType("int");

                    b.HasKey("AuthorModelId");

                    b.HasIndex("IdentityCardId")
                        .IsUnique();

                    b.ToTable("Author");
                });

            modelBuilder.Entity("Library_System.Models.BookModel", b =>
                {
                    b.Property<int>("BookModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookModelId"));

                    b.Property<DateTime>("BookModelPuplishedYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookModelTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookModelId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Library_System.Models.CreditCard", b =>
                {
                    b.Property<int>("CreditCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreditCardId"));

                    b.Property<int>("AuthorModelId")
                        .HasColumnType("int");

                    b.Property<string>("CreditCardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditCardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CreditCardId");

                    b.HasIndex("AuthorModelId");

                    b.ToTable("CreditCard");
                });

            modelBuilder.Entity("Library_System.Models.GenreModel", b =>
                {
                    b.Property<int>("GenreModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreModelId"));

                    b.Property<string>("GenreModelTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreModelId");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("Library_System.Models.IdentityCard", b =>
                {
                    b.Property<int>("IdentityCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdentityCardId"));

                    b.Property<DateTime>("ExpiaryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdentityCardId");

                    b.ToTable("IdentityCard");
                });

            modelBuilder.Entity("AuthorModelBookModel", b =>
                {
                    b.HasOne("Library_System.Models.BookModel", null)
                        .WithMany()
                        .HasForeignKey("BooksBookModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library_System.Models.AuthorModel", null)
                        .WithMany()
                        .HasForeignKey("authorsAuthorModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookModelGenreModel", b =>
                {
                    b.HasOne("Library_System.Models.BookModel", null)
                        .WithMany()
                        .HasForeignKey("booksBookModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library_System.Models.GenreModel", null)
                        .WithMany()
                        .HasForeignKey("genresGenreModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library_System.Models.AuthorModel", b =>
                {
                    b.HasOne("Library_System.Models.IdentityCard", "IndentityCard")
                        .WithOne("Author")
                        .HasForeignKey("Library_System.Models.AuthorModel", "IdentityCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IndentityCard");
                });

            modelBuilder.Entity("Library_System.Models.CreditCard", b =>
                {
                    b.HasOne("Library_System.Models.AuthorModel", "Author")
                        .WithMany("CreditCards")
                        .HasForeignKey("AuthorModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Library_System.Models.AuthorModel", b =>
                {
                    b.Navigation("CreditCards");
                });

            modelBuilder.Entity("Library_System.Models.IdentityCard", b =>
                {
                    b.Navigation("Author")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
